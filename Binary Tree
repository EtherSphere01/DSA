#include <bits/stdc++.h>
using namespace std;
//binary tree;
struct node
{
	int data;
	node* left;
	node* right;

	node(int val) {
		data = val;
		left = right = NULL;
	}
	node() {
		left = right = NULL;
	}


};


//print preorder
void print(int n) {
	cout << n << " ";
}
void preorder(node* &newnode) {
	if (newnode == NULL) {
		return;
	}
	print(newnode->data);
	preorder(newnode->left);
	preorder(newnode->right);
}
//time-> O(n)
/////////////////////////////////////


//Post order
void postorder(node* &newnode) {
	if (newnode == NULL) {
		return;
	}
	postorder(newnode->left);
	postorder(newnode->right);
	print(newnode->data);
}
//////////////////////////////////

//Inorder

void inorder(node* &newnode) {
	if (newnode == NULL) {
		return;
	}
	inorder(newnode->left);
	print(newnode->data);
	inorder(newnode->right);

}

//////////////////////////////

//////////////////////////////

//Search in Binary Search Tree;

void searchBTS(node* &root, int key) {
	node* cur  = root;

	while (cur != NULL && cur->data != key) {
		cur = key < cur->data ? cur->left : cur -> right;
	}
	if (cur != NULL ) {
		cout << "Found" << endl;
	}
	else {
		cout << "Not Found" << endl;
	}
}

//Insert an element in Binary Search Tree;

void insertBST(node* &root, int value) {

	if (root == NULL) {
		node* temp = new node();
		temp->data = value;
		root = temp;
		return;
	}

	node* cur = root;

	while (true) {
		if (value >= cur->data) {
			if (cur->right != NULL) {
				cur = cur->right;
			}
			else {
				cur->right = new node(value);
				break;
			}
		}

		else {
			if (cur->left != NULL) {
				cur = cur->left;
			}
			else {
				cur->left = new node(value);
				break;
			}
		}
	}
}

//////////////////////////////////

//Delete Node in BST;
////////////////////////////////////

int getRightMin(struct node *root)
{
	struct node *temp = root;

	//min value should be present in the left most node.
	while (temp->left != NULL) { temp = temp->left;}

	return temp->data;
}


node *deleteBST(struct node *root, int val)
{
	/*
	 * If the node becomes NULL, it will return NULL
	 * Two possible ways which can trigger this case
	 * 1. If we send the empty tree. i.e root == NULL
	 * 2. If the given node is not present in the tree.
	 */
	if (root == NULL)
		return NULL;
	/*
	 * If root->data < val. val must be present in the right subtree
	 * So, call the above remove function with root->right
	 */
	if (root->data < val)
		root->right = deleteBST(root->right, val);
	/*
	 * if root->key > val. val must be present in the left subtree
	 * So, call the above function with root->left
	 */
	else if (root->data > val)
		root->left = deleteBST(root->left, val);
	/*
	 * This part will be executed only if the root->key == val
	 * The actual removal starts from here
	 */
	else
	{
		/*
		 * Case 1: Leaf node. Both left and right reference is NULL
		 * replace the node with NULL by returning NULL to the calling pointer.
		 * free the node
		 */
		if (root->left == NULL && root->right == NULL)
		{
			free(root);
			return NULL;
		}
		/*
		 * Case 2: Node has right child.
		 * replace the root node with root->right and free the right node
		 */
		else if (root->left == NULL)
		{
			struct node *temp = root->right;
			free(root);
			return temp;
		}
		/*
		 * Case 3: Node has left child.
		 * replace the node with root->left and free the left node
		 */
		else if (root->right == NULL)
		{
			struct node *temp = root->left;
			free(root);
			return temp;
		}
		/*
		 * Case 4: Node has both left and right children.
		 * Find the min value in the right subtree
		 * replace node value with min.
		 * And again call the remove function to delete the node which has the min value.
		 * Since we find the min value from the right subtree call the remove function with root->right.
		 */
		else
		{
			int rightMin = getRightMin(root->right);
			root->data = rightMin;
			root->right = deleteBST(root->right, rightMin);
		}

	}

	//return the actual root's address
	return root;
}

/////////////////////////////////////////////////

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);


	node* root = new node(8);

	root->left = new node(4);
	root->left->left = new node(3);
	root->left->right = new node (5);
	root->left->right->left = new node(1);

	root->right = new node(9);
	root->right->left = new node(6);
	root->right->right = new node(18);
	root->right->right->left = new node(11);
	root->right->right->right = new node(19);

	// preorder(root);
	// cout << endl;
	// postorder(root);
	// cout << endl;
	// inorder(root);
	// cout << endl;


	node* insertion = new node(15);
	insertBST(insertion, 16);
	insertBST(insertion, 10);
	insertBST(insertion, 5);
	insertBST(insertion, 7);
	insertBST(insertion, 20);
	insertBST(insertion, 4);
	insertBST(insertion, 6);
	insertBST(insertion, 11);
	insertBST(insertion, 12);
	insertBST(insertion, 18);


	searchBTS(insertion, 13);

	cout << endl;
	inorder(insertion);
	cout << endl;
	deleteBST(insertion, 12);
	inorder(insertion);
	cout << endl;






}
