#include <bits/stdc++.h>
using namespace std;
//binary tree;
struct node
{
	int data;
	node* left;
	node* right;

	node(int val) {
		data = val;
		left = right = NULL;
	}
	node() {
		left = right = NULL;
	}


};


//print preorder
void print(int n) {
	cout << n << " ";
}
void preorder(node* &newnode) {
	if (newnode == NULL) {
		return;
	}
	print(newnode->data);
	preorder(newnode->left);
	preorder(newnode->right);
}
//time-> O(n)
/////////////////////////////////////


//Post order
void postorder(node* &newnode) {
	if (newnode == NULL) {
		return;
	}
	postorder(newnode->left);
	postorder(newnode->right);
	print(newnode->data);
}
//////////////////////////////////

//Inorder

void inorder(node* &newnode) {
	if (newnode == NULL) {
		return;
	}
	inorder(newnode->left);
	print(newnode->data);
	inorder(newnode->right);

}

//////////////////////////////

//////////////////////////////

//Search in Binary Search Tree;

void searchBTS(node* &root, int key) {
	node* cur  = root;

	while (cur != NULL && cur->data != key) {
		cur = key < cur->data ? cur->left : cur -> right;
	}
	if (cur != NULL ) {
		cout << "Found" << endl;
	}
	else {
		cout << "Not Found" << endl;
	}
}

//Insert an element in Binary Search Tree;

void insertBST(node* &root, int value) {

	if (root == NULL) {
		node* temp = new node();
		temp->data = value;
		root = temp;
		return;
	}

	node* cur = root;

	while (true) {
		if (value >= cur->data) {
			if (cur->right != NULL) {
				cur = cur->right;
			}
			else {
				cur->right = new node(value);
				break;
			}
		}

		else {
			if (cur->left != NULL) {
				cur = cur->left;
			}
			else {
				cur->left = new node(value);
				break;
			}
		}
	}
}

//////////////////////////////////

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);


	node* root = new node(8);

	root->left = new node(4);
	root->left->left = new node(3);
	root->left->right = new node (5);
	root->left->right->left = new node(1);

	root->right = new node(9);
	root->right->left = new node(6);
	root->right->right = new node(18);
	root->right->right->left = new node(11);
	root->right->right->right = new node(19);

	preorder(root);
	cout << endl;
	postorder(root);
	cout << endl;
	inorder(root);
	cout << endl;


	node* insertion = new node(15);
	insertBST(insertion, 16);
	insertBST(insertion, 10);
	insertBST(insertion, 5);
	insertBST(insertion, 7);
	insertBST(insertion, 20);
	insertBST(insertion, 4);
	insertBST(insertion, 6);
	insertBST(insertion, 11);
	insertBST(insertion, 12);
	insertBST(insertion, 18);


	searchBTS(insertion, 13);

	cout << endl;
	inorder(insertion);
	cout << endl;






}
