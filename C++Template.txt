#include <bits/stdc++.h>
using namespace std;

/* in the main function (int main())
 The size of ARRAY is int a[10^6]
 The size of Bool is bool a[10^7]
 & in the global or out side the main function(void function()) 
 The size of ARRAY is int a[10^7]
 The size of Bool is bool a[10^8]
 */

 void code(){
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
}

int N=86028121;
bool isprime[86028121];
void prime(){  //Sieve of Eratosthenes(Sieve Algorithm) 
   for(int i=2; i<=N; i++){
      isprime[i] = true;
   }
   for(int i=2; i*i<=N; i++){
      if(isprime[i]==true){
         for(int j=i*i; j<=N; j+=i){
            isprime[j] = false;
         }
      }
   }
   
} // Time limit for this algorithm is - O(N(log(logN)))
 // If we use this is main the time is - O(N(log(logN))) + Test case value (Time<10^9)

void primesize(){ 
   prime();
   int limit=5000000;
   int cnt=0;
   int size=1;
   for(int i=2;; i++){
      if(isprime[i]==true){
         cnt++;
      }
      if(cnt==limit){
         size = i;
         break;
      }
   }
   cout << size << endl;

}

vector<int>pn;
void nthprime(){ //Time for this in main function is O(1) and for this the time is like sieve
   prime();
   for(int i=2; i<=N; i++){
      if(isprime[i]==true){
         pn.push_back(i);
      }
   }
}

int M=1000000;
int total[1000000];
void totalfactor(){ //Time in the mian function is O(1); & For this the time is like sieve
   for(int i=2; i<=M; i++){
      total[i] = 1;
   }
   for(int i=2; i*i<=M; i++){
      if(total[i]==1){
         for(int j=i*i; j<=M; j+=i){
            if(total[j]!=0){
               total[i]++;
               total[j]=0;
            }
         }
      }
   }
}


int main()
{
   
}
